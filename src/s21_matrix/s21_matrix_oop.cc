#include "./s21_matrix_oop.h"

#include <algorithm>  // std::copy | std::min
#include <cmath>      // std::abs
#include <iostream>   // TODO: remove
#include <stdexcept>  // length_error | out_of_range | logic_error
#include <utility>    // std::move | std::swap

// TODO: расписать почему нулевые размеры
/**
 * @brief
 * Конструктор по умолчанию (Default constructor). Создает объект S21Matrix
 * размером [0 × 0], заполненный нулями.
 *
 * @details
 * Выносим объявление полей в initializer list, чтобы избежать двойной
 * инициализации (да и в целом рекомендуемая практика - всегда, если возможно,
 * использовать initializer list).
 *
 * noexcept - указывает, что наш метод не генерирует (не выбрасывает)
 * исключения и не завершает аварийно свою работу. Т.е. вы не бросаете
 * исключение в коде метода, а все используемые внутри методы тоже не бросают
 * исключения (т.е. являются noexcept). Либо всё, что может бросить исключение,
 * обернуто в try / catch и мы гарантируем, что исключение не будет проброшено
 * выше.
 *
 * noexcept сильно уменьшает размер итогового бинарного файла и ускоряет работу
 * программы. Но использовать его необходимо осторожно, т.к. если метод,
 * помеченный noexcept, выпустит исключение наружу, то ваша программа вызовет
 * std::terminate() и завершится, даже не соблаговолив вызвать деструкторы для
 * уже созданных переменных (стек НЕ обязан развернуться).
 */
S21Matrix::S21Matrix() noexcept : rows_(0), cols_(0), matrix_(nullptr) {}

// TODO: почему память линейно выделена
// TODO: Привести пример, как в std накосячили из-за разрешения неявных
// преобразований
/**
 * @brief
 * Параметризованный конструктор (Parameterized Constructor). Создает объект
 * S21Matrix размером [rows × cols], заполненный нулями.
 *
 * @details
 * Разрешаем создавать матрицы вида [0 × 5] или [5 × 0], т.к. в математике,
 * пустая матрица определяется как матрица, в которой один из размеров m или n
 * равен нулю, следовательно, они являются матрицами размерности [m × 0],
 * [0 × n] или [0 × 0].
 * via: https://ru.frwiki.wiki/wiki/Matrice_vide
 * Кроме того, например, тот же MatLab позволяет создавать и работать с такими
 * матрицами :)
 *
 * В заголовочном файле конструктор помечен как explicit - предотвращает неявное
 * преобразование типов при инициализации. Обычно рекомендуется это ключевое
 * слово ставить перед объявлением конструктора с одним параметром (или с
 * большим числом параметров, но когда все параметры, начиная со второго, имеют
 * значения по умолчанию) - чтобы избежать неожиданных преобразований в
 * неожиданных местах.
 *
 * Для move- и copy-конструкторов не рекомендуется ставить, т.к. это может
 * повлиять на совместимость, например, со стандартными алгоритмами.
 *
 * В общем случае надо думать головой, полезны нам неявные преобразования или
 * вредны. Например, для std::string чаще всего удобно, что char* неявно
 * преобразуется в выражении в std::string. Однако бывают и ситуации, когда
 * неявное преобразование неожиданно и внезапно портит жизнь - <ВОТ ТУТ ПРИМЕР>
 *
 * Поэтому начинающим программистам лучше всегда ставить explicit :)
 *
 * Начиная с C++11 добавили универсальную инициализацию (uniform
 * initialization). С появлением универсальной инициализации explicit обрёл
 * смысл для конструкторов с 0,2,3 и более параметров.
 *
 * Например, вот такое выражение:
 * S21Matrix matrix_check = {5, 4};
 * Здесь будет неявно вызван конструктор S21Matrix(int rows, int cols)
 *
 * Однако, человек, который написал такое выражение, с высокой долей вероятности
 * подразумевал что-то другое (например, что это значения матрицы), совсем
 * неочевидно, что это будут размеры будущей матрицы. Поэтому, запрещаем такое
 * вызывать и помечаем конструктор как explicit.
 *
 * @param rows Количество строк
 * @param cols Количество столбцов
 */
S21Matrix::S21Matrix(int rows, int cols) : rows_(rows), cols_(cols) {
  if (rows_ < 0 || cols_ < 0) {
    throw std::length_error("Matrix size must be greater or equal than 0");
  }
  // Используем new c {} (можно и () - для double нет разницы) - чтобы выделить
  // память с value-initialization, чтобы инициализировать значения нулями
  // (zero-initialization для POD-типов, к которым относится double)
  matrix_ = new double[rows_ * cols_]{};
}

/**
 * @brief Конструктор копирования (Copy Constructor). Создает объект S21Matrix
 * путем копирования данных из объекта other.
 *
 * @details
 * std::copy супербыстрый, т.к. умеет целыми блоками копировать, если это
 * возможно (как std::memcpy). Мы можем это провернуть из-за этого, что выделили
 * память одним куском.
 *
 * Т.к. дефолтный конструктор создает матрицу 0х0, то конструктор копирования
 * может вызываться для копирования матрицы 0х0 - в этом случае мы получим вызов
 * new double[0]{} - стандарт C++ разрешает нам это делать. Однако надо
 * учитывать 2 момента:
 * 1) Мы не можем разыменовать такую память (UB) - у нас этого не произойдет,
 * т.к. rows_ и cols_ будут содержать 0.
 * 2) Мы обязаны такую память тоже чистить - у нас тоже всё ок, мы всегда
 * вызываем delete в деструкторе.
 *
 * По всем признакам выглядит, что std::copy тоже легально использовать в этом
 * сценарии (копируем 0 элементов из nullptr), если смотреть документацию.
 *
 * @param other Копируемая матрица
 */
S21Matrix::S21Matrix(const S21Matrix &other)
    : rows_(other.rows_),
      cols_(other.cols_),
      matrix_(new double[rows_ * cols_]{}) {
  std::copy(other.matrix_, other.matrix_ + rows_ * cols_, matrix_);
}

/**
 * @brief
 * Конструктор переноса (Move Constructor). Создает объект S21Matrix путем
 * передачи владения ресурсами от объекта other.
 *
 * @details
 * noexcept - С++ Core Guidelines настоятельно рекомендует использовать слово
 * noexcept для конструктора переноса и оператора переноса (т.к. не происходит
 * никаких операций с памятью, а происходит простое присвоение указателя). Можно
 * даже сказать, что отсутствие noexcept - ошибка.
 *
 * via:
 * https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-move-noexcept
 *
 * @param other Перемещаемая матрица
 */
S21Matrix::S21Matrix(S21Matrix &&other) noexcept
    : rows_(other.rows_), cols_(other.cols_), matrix_(other.matrix_) {
  // Обязательно зануляем указатель из other, т.к. в противном случае оба
  // указателя будут указывать на один участок памяти и при вызове деструктора
  // other будет очищена память текущего объекта (ну и rows_ cols_ тоже зануляем
  // для сохранения консистентности other).
  other.matrix_ = nullptr;
  other.rows_ = 0;
  other.cols_ = 0;
}

// TODO: в каких случаях операторы будут помечаться как delete? - правило 5
/**
 * @brief
 * Оператор присваивания копированием
 *
 * @details
 * Если в программе объявить класс, в котором оператор присваивания не
 * перегружается, то для этого класса компилятором будет создан оператор
 * присваивания по умолчанию. При вызове оператора присваивания по умолчанию
 * происходит побайтовое копирование одного экземпляра класса другому.
 *
 * В нашем случае это недопустимо, т.к. в этом случае 2 экземпляра S21Matrix в
 * поле matrix_ будут указывать на один и тот же участок памяти - при удалении
 * одного из объектов, второй потеряет все данные и станет неконсистентным.
 *
 * Вызывать Free(), а потом копировать данные other - ошибка, мы не соблюдаем
 * строгую гарантию безопасности исключений. Поэтому используем временный объект
 * для копии.
 *
 * @param other копируемый объект S21Matrix
 * @return S21Matrix&
 */
S21Matrix &S21Matrix::operator=(const S21Matrix &other) {
  // Проверка на самоприсваивание, чтобы не делать лишнего копирования в этом
  // случае (хотя отсутствие условия не будет ошибкой в такой реализации через
  // временный объект)
  // TODO: удалить проверку?
  if (this != &other) {
    S21Matrix copy{other};
    *this = std::move(copy);
  }
  return *this;
}

/**
 * @brief
 * Оператор присваивания переносом.
 *
 * @details
 * Цель использования оператора переноса такая же, как и конструктора переноса –
 * ускорить выполнение программы за счет избежания непосредственного копирования
 * данных при присваивании так называемых rvalue-ссылок, которые используются в
 * выражениях в правой части оператора присваивания (это если по-простому,
 * вообще понятие rvalue/lvalue/xvalue обширнее).
 *
 * Если в классе не реализован оператор переноса, то этот оператор заменяется
 * оператором копирования.
 *
 * В общем случае оператор состоит из следующих действий:
 * 1) Проверка, не происходит ли присваивание экземпляра самому себе в случаях,
 * когда метод может каким-либо образом возвращать этот же экземпляр
 * 2) Освобождение памяти под выделенные внутренние данные. Экземпляр lvalue уже
 * создан ранее и в нем уже есть некоторые данные;
 * 3) Присваивание внутренним указателям адресов данных, которые необходимо
 * скопировать в текущий экземпляр.
 *
 * Судьба other при этом нам безразлична, но процитируем стандарт:
 *
 * Objects of types defined in the C++ standard library may be moved from
 * ([class.copy]). Move operations may be explicitly specified or implicitly
 * generated. Unless otherwise specified, such moved-from objects shall be
 * placed in a valid but unspecified state.
 *
 * Т.е. после мува other находится в корректном, но неопределенном состоянии.
 * Поэтому допустимым вариантом является ничего в this не чистить, а обменяться
 * ресурсами с other (см. комментарий в теле функции). Оставлять other в
 * некорректном (неконсистентном) состоянии - ошибка.
 *
 * @param other объект S21Matrix, у которого забираем владение ресурсами
 * @return S21Matrix&
 */
S21Matrix &S21Matrix::operator=(S21Matrix &&other) noexcept {
  if (this != &other) {
    // Можно убрать вообще Free() и делать только swap
    // В этом случае удаление сваливаем на деструктор объекта other, который
    // всё равно будет вызван в ближайшее время.
    Free();

    std::swap(rows_, other.rows_);
    std::swap(cols_, other.cols_);
    std::swap(matrix_, other.matrix_);
  }

  return *this;
}

/**
 * @brief Деструктор объекта (Destructor).
 *
 * @details
 * Вызывается, когда заканчивается время жизни объекта, чтобы освободить
 * ресурсы, занимаемые объектом.
 *
 * Функции освобождения должны быть noexcept.
 * via:
 * https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#e16-destructors-deallocation-swap-and-exception-type-copymove-construction-must-never-fail
 *
 * Начиная с C++11 компилятор неявно сам прописывает noexcept, однако,
 * существуют определенные правила, которые приводят к тому, что деструктор без
 * спецификации исключения неявно объявляется как noexcept или как
 * noexcept(false). Дабы не играть в рулетку, лучше указать явно.
 */
S21Matrix::~S21Matrix() noexcept { Free(); }

/**
 * @brief Проверяет матрицы на равенство между собой.
 *
 * @details
 * Матрицы считаются равными, если у них одинаковый размер и элементы с
 * одинаковым индексом отличаются не более чем на this->kEpsilon
 *
 * В заголовочном файле написано, что данный метод можно объявить как
 * [[nodiscard]] - это используется, чтобы обозначить, что возвращаемое значение
 * функции должно быть обязательно использовано при вызове.
 *
 * Распространенная ошибка - помечать всё подряд как [[nodiscard]] - если бы это
 * действительно было нужно, то это было бы реализованно на уровне компилятора.
 * Даже если кажется, что вызывать функцию и не сохранять её результат
 * бессмысленно, например для оператора+, то это может быть не так -
 * протестировать выбрасывание исключения мы вполне себе можем без сохранения
 * результата.
 *
 * [[nodiscard]] необходимо прописывать, когда игнорирование возвращаемого
 * функций значения является ошибкой. Например, если функцию делает глубокую
 * копию чего-либо и возвращает указатель на выделенную память - игнорирование
 * приведет к утечке. Хорошим примером ещё является возвращение кода ошибки
 * (таким образом компилятор всегда напомнит, если вы не сохраняете код ошибки
 * и, соответственно не проверяете его) - в противном случае очень легко
 * проигнорировать коды ошибок и ничего не проверять. Ещё пример - если функция
 * не имеет никаких эффектов, кроме возврата определенного результата:
 * 1) Например, если функция удаляет какой-то элемент из контейнера и возвращает
 * его значение - помечать [[nodiscard]] некорректно, мы можем вызывать функцию
 * только ради удаления.
 * 2) Если некий парсер парсит файл и возвращает структуру данных этого файла -
 * игнорировать его будет некорректно, т.к. потрачено много времени и памяти, а
 * ничего кроме результата функция не сделала (в этом случае, кстати, можно
 * отметить как [[nodiscard]] структуру данных, а не функцию).
 *
 * Однако стоит помнить, что чаще всего не от вас зависит, что пользователи
 * сделают с нашими результатами. Игнорирование результата — чаще всего вполне
 * допустимая вещь, которую могут захотеть сделать пользователи (кроме случаев,
 * когда игнорирование - это критическая ошибка - как в примере с указателем на
 * глубокую копию).
 *
 * В данном случае ничего страшного не случится, поэтому EqMatrix() не помечаем
 * как [[nodiscard]].
 *
 * @param other Сравниваемая матрица
 * @return true Если матрицы равны
 * @return false Если матрицы не равны
 */
bool S21Matrix::EqMatrix(const S21Matrix &other) const {
  if (rows_ != other.rows_ || cols_ != other.cols_) {
    return false;
  }

  for (int i = 0; i < rows_; ++i) {
    for (int j = 0; j < cols_; ++j) {
      if (std::abs(other(i, j) - (*this)(i, j)) > kEpsilon) {
        return false;
      }
    }
  }

  return true;
}

/**
 * @brief Прибавляет вторую матрицы к текущей
 *
 * @details
 * Суммой двух матриц A[m × n] и B[m × n] одинаковых размеров называется матрица
 * C[m × n] = A + B тех же размеров, элементы которой определяются равенствами
 * C(i,j) = A(i,j) + B(i,j).
 *
 * Сложить матрицы разных размеров нельзя
 *
 * @param other 2е слагаемое (матрица)
 */
void S21Matrix::SumMatrix(const S21Matrix &other) {
  if (rows_ != other.get_rows() || cols_ != other.get_cols()) {
    throw std::logic_error("Incorrect matrix size for Sum");
  }

  for (int i = 0; i < rows_; ++i) {
    for (int j = 0; j < cols_; ++j) {
      (*this)(i, j) = (*this)(i, j) + other(i, j);
    }
  }
}

/**
 * @brief Вычитает из текущей матрицы другую
 *
 * @details
 * Разностью двух матриц A[m × n] и B[m × n] одинаковых размеров называется
 * матрица C[m × n] = A - B тех же размеров, элементы которой определяются
 * равенствами C(i,j) = A(i,j) - B(i,j).
 *
 * Вычесть матрицы разных размеров нельзя
 *
 * @param other
 */
void S21Matrix::SubMatrix(const S21Matrix &other) {
  if (rows_ != other.get_rows() || cols_ != other.get_cols()) {
    throw std::logic_error("Incorrect matrix size for Sub");
  }

  for (int i = 0; i < rows_; ++i) {
    for (int j = 0; j < cols_; ++j) {
      (*this)(i, j) = (*this)(i, j) - other(i, j);
    }
  }
}

/**
 * @brief Умножает текущую матрицу на число
 *
 * @details
 * Произведением матрицы A[m × n] на число λ называется матрица
 * B[m × n] = λ × A, элементы которой определяются равенствами
 * B(i,j) = λ × A(i,j).
 *
 * Применимо к корректной матрице любого размера
 *
 * @param number 2й множитель (число)
 */
void S21Matrix::MulNumber(const double number) noexcept {
  for (int i = 0; i < rows_; ++i) {
    for (int j = 0; j < cols_; ++j) {
      (*this)(i, j) = (*this)(i, j) * number;
    }
  }
}

/**
 * @brief Умножает текущую матрицу на вторую
 *
 * @details
 * Произведением матрицы A[m × k] на матрицу B[k × n] называется матрица
 * C[m × n] = A × B размера m × n, элементы которой определяются равенством
 * C(i,j) = A(i,1) × B(1,j) + A(i,2) × B(2,j) + … + A(i,k) × B(k,j).
 *
 * Соответственно перемножить можно матрицы A и B только при условии, что
 * количество столбцов в матрице A равно количеству строк в матрице B
 *
 * @param other 2й множитель (матрица)
 */
void S21Matrix::MulMatrix(const S21Matrix &other) {
  if (cols_ != other.get_rows()) {
    throw std::logic_error("Incorrect matrix size for Multiplication");
  }

  S21Matrix result{rows_, other.get_cols()};

  for (int i = 0; i < result.get_rows(); ++i) {
    for (int j = 0; j < result.get_cols(); ++j) {
      for (int k = 0; k < cols_; ++k) {
        result(i, j) += (*this)(i, k) * other(k, j);
      }
    }
  }
  *this = std::move(result);
}

/**
 * @brief Создает новую транспонированную матрицу из текущей и возвращает ее.
 *
 * Транспонирование матрицы А заключается в замене строк этой матрицы ее
 * столбцами с сохранением их номеров.
 *
 *      1 4
 * A =  2 5
 *      3 6
 *
 *       1 2 3
 * A^T = 4 5 6
 *
 * @return S21Matrix Транспонированная матрица
 */
S21Matrix S21Matrix::Transpose() const {
  S21Matrix result{cols_, rows_};

  for (int i = 0; i < rows_; ++i) {
    for (int j = 0; j < cols_; ++j) {
      result(j, i) = (*this)(i, j);
    }
  }

  return result;
}

/**
 * @brief Вычисляет матрицу алгебраических дополнений текущей матрицы и
 * возвращает ее
 *
 * @details
 * Алгебраическим дополнением элемента a[i][j] матрицы A называется число:
 * A(ij)=(-1)^(i+j)*M(ij), где M(ij) - дополнительный минор, определитель
 * матрицы, получающейся из исходной матрицы A путём вычёркивания i-й строки и
 * j-го столбца.
 *
 * Матрица алгебраических дополнений состоит из таких алгебраических дополнений
 * (посчитанных для каждого элемента матрицы)
 *
 * Т.к. определитель можно посчитать только для квадратной матрицы, то и матрицу
 * алгебраических дополнений можно посчитать только для квадратной матрицы.
 *
 * Т.к. минор получается вычеркиванием из оригинальной матрицы столбца и строки,
 * то для матрицы 1х1 мы должны посчитать определитель матрицы [0 × 0], который
 * всегда равен 1.
 * via:
 * 1) What is the adjoint of a 1×1 matrix?
 * https://www.quora.com/What-is-the-adjoint-of-a-1-1-matrix
 * 2) What is the determinant of a 0x0 matrix?
 * https://groups.google.com/g/sage-devel/c/sTQNFjCgXwc
 * 3) Why is the determinant of the 0x0 matrix equal 1?
 * https://math.stackexchange.com/questions/1762537/why-is-the-determinant-of-the-0x0-matrix-equal-1
 *
 * А для матрицы [0 × 0] мы создаем ответ [0 × 0] и не заполняем его, т.к.
 * заполнять нечего.
 *
 * @return S21Matrix Матрица алгебраических дополнений
 */
S21Matrix S21Matrix::CalcComplements() const {
  if (rows_ != cols_) {
    throw std::logic_error("Incorrect matrix size for CalcComplements");
  }

  S21Matrix result{rows_, cols_};

  for (int i = 0; i < result.get_rows(); ++i) {
    for (int j = 0; j < result.get_cols(); ++j) {
      S21Matrix minor_matrix = GetMinorMatrix(i, j);
      result(i, j) = minor_matrix.Determinant();

      if ((i + j) % 2 != 0) {
        result(i, j) = -result(i, j);
      }
    }
  }

  return result;
}

/**
 * @brief Метод для вычисления определителя (детерминанта) матрицы. Определитель
 * возможно посчитать только для квадратной матрицы.
 *
 * @details
 * Прямые методы вычисления определителя могут быть основаны непосредственно на
 * его определении, как суммы по перестановкам, или на разложении Лапласа по
 * определителям меньшего порядка. Однако такие методы очень неэффективны, так
 * как требуют О(n!) операций для вычисления определителя n-го порядка.
 * Из-за этого возникнут проблемы для больших матриц, при n=12 уже есть заметные
 * проблемы с быстродействием:
 * n = 11 ~3сек
 * n = 12 ~35сек
 * n = 13 ~460сек
 *
 * Кроме этого при использовании типа double при машинных вычислениях могут
 * возникать проблемы накопления погрешности для больших чисел и больших матриц
 * (т.к. производится много промежуточных перемножений этих чисел), из-за чего
 * даже числа порядка 1e7 в матрице 5х5 уже могут не дать правильный ответ,
 * когда определитель должен быть нулем. Небольшие по модулю, но с большим
 * количеством знаков после запятой могут дать такой же эффект. Для примера
 * можно посмотреть следующие тесты:
 * TestDeterminantZero7
 * TestDeterminantZero27
 * TestDeterminantZero28
 * TestDeterminantZero29
 *
 * Причём результаты тестов могут отличаться при методах разложения по строке и
 * разложения по столбцу.
 *
 * Поэтому будем вычислять методом Гаусса, сложность данного алгоритма
 * составляет уже O(n^3).
 *
 * Алгоритм базируется на следующих свойствах определителя матрицы:
 * 1) Определитель верхнетреугольной матрицы (квадратная матрица, у которой все
 * элементы ниже главной диагонали равны нулю) равен произведению элементов её
 * главной диагонали.
 * 2) Обмен двух строк матрицы местами меняет знак определителя на
 * противоположный.
 * 3) Определитель не меняется, если к элементам одной из его строк прибавляются
 * (или вычитаются) соответственные элементы другой строки, умноженные на одно и
 * то же число.
 *
 * Мы будем преобразовывать матрицу именно к верхнетреугольному виду, хотя
 * возможно приводить к нижнетреугольной форме или к диагональной.
 *
 * Суть алгоритма:
 * 1) На первом шаге прибавляем первую строку к остальным строкам с такими
 * коэффициентами, чтобы элементы этих строк в первом столбце превратились в
 * нули. В итоге по окончании первого шага первый столбец матрицы будет
 * содержать нули, кроме 1й строки.
 * 2) Аналогично производится второй шаг алгоритма, только теперь
 * рассматривается второй столбец и вторая строка: вторая строка отнимается от
 * всех остальных строк (начиная с третьей) с такими коэффициентами, чтобы
 * обнулять второй столбец матрицы (с третьей строки и дальше).
 * 3) После обработки всех строк мы получим верхнетреугольную матрицу.
 * Определитель можно посчитать как произведение элементов её главной диагонали.
 *
 * Есть одно но: данный алгоритм работает только в том случае, если на каждом
 * i-м шаге элемент (i, i) матрицы отличен от нуля - иначе мы просто не сможем
 * добиться обнуления остальных коэффициентов в текущем столбце путём
 * прибавления к ним i-ой строки.
 *
 * Чтобы сделать алгоритм работающим в таких случаях существует процесс выбора
 * опорного элемента ("pivoting"). Если в ходе алгоритма на i-м шаге
 * элемент (i, i) матрицы равен нулю, то производится перестановка строк, чтобы
 * в элементе (i, i) матрицы был не нуль. Соответственно знак определителя при
 * этом меняется на противоположный, как следует из указанных выше свойств
 * определителя.
 *
 * Рекомендуется такой алгоритм: в качестве опорного элемента следует брать
 * наибольший по модулю элемент, причём производить поиск опорного элемента и
 * обмен с ним надо всегда, а не только когда это необходимо (т.е. не только
 * тогда, когда элемент (i, i) == 0). Поиск опорного элемента на каждом шаге
 * улучшает численную устойчивость алгоритма Гаусса, что очень важно.
 *
 * Осталось только заметить, что если в какой-то момент при поиске опорного
 * элемента мы не найдём в текущем столбце ненулевого элемента, то алгоритм
 * следует остановить и определитель матрицы будет равен нулю.
 *
 * Небольшой пример для наглядности, дана матрица:
 * 0 1 2
 * 3 4 5
 * 6 0 7
 *
 * Считаем пока det = 1;
 *
 * Шаг1:
 * 1) Работаем со строкой 0. Выбираем опорный элемент в столбце 0. Строка 2
 * содержит самый большой элемент, поэтому меняем местами строки 0 и 2:
 * 6 0 7
 * 3 4 5
 * 0 1 2
 * 2) Т.к. осуществлен обмен строк, то меняем знак определителя, det = -1;
 * 3) Зануляем строку 1, вычитая строку 0, умноженную на 3 / 6 = 0.5:
 * 3 4 5 - 0.5 * (6 0 7) = 0 4 1.5
 * 4) Зануляем строку 2, вычитая строку 0, умноженную на 0 / 6 = 0:
 * 0 1 2 - 0 * (6 0 7) = 0 1 2
 *
 * 5) Итого наша матрица после первого шага:
 * 6 0 7
 * 0 4 1.5
 * 0 1 2
 *
 * 6) Т.к. первая строка уже не будет меняться, то можем сразу умножить наш
 * определитель на 6 (чтобы повторно не проходить всю матрицу в цикле),
 * det = -1 * 6 = -6.
 *
 * Шаг2:
 * 1) Работаем со строкой 1. Выбираем опорный элемент в столбце 1. Строка 1
 * содержит самый большой элемент, поэтому ничего не меняем:
 * 6 0 7
 * 0 4 1.5
 * 0 1 2
 * 2) Т.к. обмена строк не было, то не трогаем наш определитель.
 * 3) Зануляем строку 2, вычитая строку 1, умноженную на 1 / 4 = 0.25:
 * 0 1 2 - 0.25 * (0 4 1.5) = 0 0 1.625
 * 4) Итого наша матрица после второго шага:
 * 6 0 7
 * 0 4 1.5
 * 0 0 1.625
 *
 * 5) Т.к. вторая строка уже не будет меняться, то можем сразу умножить наш
 * определитель на 4, det = -6 * 4 = -24.
 *
 * Шаг3:
 * Собственно последня строка, больше занулять нечего, поэтому умножаем наш
 * определитель на 1.625, det = -24 * 1.625 = −39
 *
 * Итого определитель матрицы равен -39.
 *
 *
 * ВАЖНО: в данной реализации result изначально равен 1.0 не просто так, для
 * матрицы 0x0 мы вообще не зайдем в цикл и вернем 1.0 - это абсолютно верно -
 * см. комментарии к CalcComplements().
 *
 * @return double Рассчитанный определитель (детерминант)
 */
double S21Matrix::Determinant() const {
  if (rows_ != cols_) {
    throw std::logic_error("Incorrect matrix size for Determinant");
  }

  double result = 1.0;
  S21Matrix tmp{*this};
  int size = rows_;

  for (int i = 0; i < size; ++i) {
    // Выбор опорного элемента. pivoting = индекс опорного элемента
    int pivoting = i;
    for (int j = i + 1; j < size; ++j) {
      if (std::abs(tmp(j, i)) > std::abs(tmp(pivoting, i))) {
        pivoting = j;
      }
    }

    // Если i-й элемент опорной строки равен нулю, то останавливаем расчеты и
    // возвращаем определитель, равный нулю
    if (std::abs(tmp(pivoting, i)) < kEpsilon) {
      return 0.0;
    }

    // Меняем местами текущую строку и строку с опорным элементом. Метод не
    // осуществит замену при равенстве индексов
    tmp.SwapRows(i, pivoting);

    // Т.к. текущая строка уже не будет меняться, то можем сразу умножить наш
    // определитель на элемент (i, i) матрицы
    result *= tmp(i, i);

    // Если был обмен строк, то меняем знак определителя
    if (i != pivoting) {
      result = -result;
    }

    // Осуществляем вычитание текущей строки из всех следующих
    for (int j = i + 1; j < size; ++j) {
      // Считаем коэффициент, чтобы занулить элементы строки
      double koef = tmp(j, i) / tmp(i, i);
      for (int k = i; k < size; ++k) {
        // Зануляем, начиная со столбца i, т.к. предыдущие столбцы уже занулены
        // на предыдущих шагах и не изменятся
        tmp(j, k) -= tmp(i, k) * koef;
      }
    }
  }

  return result;
}

/**
 * @brief Вычисляет и возвращает обратную матрицу.
 *
 * @details
 * Поиск обратной матрицы A^(-1)
 *
 * Для неквадратных матриц и вырожденных матриц (определитель равен нулю)
 * обратных матриц не существует.
 *
 * Произведение матрицы на обратную ей матрицу равно единичной матрице.
 * Единичная матрица — квадратная матрица, элементы главной диагонали которой
 * равны единице, а остальные равны нулю.
 *
 * Например:
 * 1 2  *   -2    1  =  1 0
 * 3 4     1.5 -0.5     0 1
 *
 * т.е. матрица  -2    1 является обратной матрицей для 1 2
 *              1.5 -0.5                                3 4
 *
 * Алгоритм нахождения обратной матрицы для матрицы A порядка 2 и более:
 * 1) Определяем, существует ли обратная матрица для заданной.
 * 2) Находим транспонированную матрицу A^T.
 * 3) Составляем матрицу алгебраических дополнений для A^T
 * 4) Составляем обратную матрицу из матрицы алгебраических дополнений: каждый
 * элемент матрицы алгебраических дополнений для A^T делят на определитель
 * исходной матрицы. Результирующая матрица является обратной для исходной
 * матрицы.
 *
 * Алгоритм нахождения обратной матрицы для матрицы порядка 1:
 * 1) Определяем, существует ли обратная матрица для заданной.
 * 2) A^(-1)[0][0] = 1 / A[0][0]
 *
 * Для проверки результата можно перемножить исходную и полученную матрицы. В
 * результате должна получиться единичная матрица.
 *
 * @todo Чаще всего обратную матрицу всё-таки ищут при помощи метода Гаусса
 *
 * @return S21Matrix Обратная матрица
 */
S21Matrix S21Matrix::InverseMatrix() const {
  if (rows_ != cols_) {
    throw std::logic_error("Incorrect matrix size for Inverse");
  }

  double det = Determinant();

  if (std::abs(det) < kEpsilon) {
    throw std::logic_error("Determinant must be non-zero to calculate Inverse");
  }

  return Transpose().CalcComplements() * (1.0 / det);
}

/**
 * @brief Accessor (Getter) поля rows_.
 *
 * @details
 * В общем случае метод, позволяющий получить данные, доступ к которым напрямую
 * ограничен (приватное поле). Основное назначение - реализовать гибкий
 * механизм инкапсуляции.
 *
 * @return int значение поля rows_
 */
int S21Matrix::get_rows() const noexcept { return rows_; }

/**
 * @brief Accessor (Getter) поля cols_.
 *
 * @return int значение поля cols_
 */
int S21Matrix::get_cols() const noexcept { return cols_; }

/**
 * @brief Mutator (Setter) поля rows_.
 *
 * @details
 * В общем случае метод, позволяющий модифицировать данные, доступ к которым
 * напрямую ограничен (приватное поле). Основное назначение - реализовать гибкий
 * механизм инкапсуляции, позволив изменить значение поля, обработав при этом
 * все ограничения (произведя дополнительные действия при необходимости) и
 * сохранив инвариант класса.
 *
 * Благодаря линейному выделению памяти, на самом деле, при уменьшении
 * количества строк, мы можем просто сделать rows_ = new_rows, перевыделять
 * память при это необязательно. Однако для универсальности, сделаем
 * перевыделение, чтобы не зависеть от способа выделения памяти.
 *
 * @param new_rows Новое значение для rows_
 */
void S21Matrix::set_rows(int new_rows) {
  if (new_rows < 0) {
    throw std::length_error("matrix rows count must be non-negative");
  }

  if (new_rows != rows_) {
    S21Matrix tmp{new_rows, cols_};
    int min = std::min(rows_, new_rows);
    for (int i = 0; i < min; ++i) {
      for (int j = 0; j < cols_; ++j) {
        tmp(i, j) = (*this)(i, j);
      }
    }
    *this = std::move(tmp);
  }
}

/**
 * @brief Mutator (Setter) поля cols_.
 *
 * @param new_rows Новое значение для cols_
 */
void S21Matrix::set_cols(int new_cols) {
  if (new_cols < 0) {
    throw std::length_error("matrix columns count must be non-negative");
  }

  if (new_cols != cols_) {
    S21Matrix tmp{rows_, new_cols};
    int min = std::min(cols_, new_cols);
    for (int i = 0; i < rows_; ++i) {
      for (int j = 0; j < min; ++j) {
        tmp(i, j) = (*this)(i, j);
      }
    }
    *this = std::move(tmp);
  }
}

/**
 * @brief Индексация по элементам матрицы (строка row, колонка col).
 *
 * @details
 * Возвращает ссылку на элемент, которая позволяет как получить его значение,
 * так и изменить при необходимости.
 *
 * Указание & после метода - это перегрузка по вызову функций для lvalue (&) и
 * rvalue (&&). Называется reference-qualified member functions. Необходимо,
 * чтобы нельзя было использовать эту функцию для rvalue с риском получить
 * висячую ссылку. В целом можно посмотреть тест TestOperatorBracketsParrot для
 * примеров.
 *
 * Из-за наличия & компилятор начинает помечать ошибкой такой код:
 * double& z = S21Matrix{}(0,0);
 *
 * Однако всё еще считается допустимым такой код из-за особенностей
 * const-ссылок (т.к. const & будет вызывать и на rvalue тоже, но с меньшим
 * приоритетом чем &&):
 * const double& zz = S21Matrix{}(0, 0);
 *
 * Чтобы это запретить, в заголовочном файле прописываем:
 * double& operator()(int row, int col) && = delete;
 *
 * Т.е. мы удаляем метод, перегруженный для rvalue (&&), соответственно его
 * становится недопустимо использовать.
 *
 * Из недостатков, теперь некорректным считается и такой код:
 * std::cout << (matrix1 + matrix2)(0, 0) << std::endl;
 *
 * @param row номер столбца запрашиваемого элемента
 * @param col номер строки запрашиваемого элемента
 * @return double& ссылка на значение (row, col)
 */
double &S21Matrix::operator()(int row, int col) & {
  return GetMatrixElement(row, col);
}

/**
 * @brief Индексация по элементам матрицы (строка row, колонка col) для
 * const-объектов.
 *
 * @details
 * Перегрузка оператора () для const-объектов. В целом идентичен обычной
 * перегрузке оператора (), за исключением того, что возвращает const-ссылку.
 * Соответственно позволяет получить значение элемента, но не позволяет его
 * изменить. Как вариант - можно возвращать просто double.
 *
 * @param row Номер столбца запрашиваемого элемента
 * @param col Номер строки запрашиваемого элемента
 * @return double& const-ссылка на значение (row, col)
 */
const double &S21Matrix::operator()(int row, int col) const & {
  return GetMatrixElement(row, col);
}

/**
 * @brief Перегрузка оператора == для объекта.
 *
 * @param other сравниваемая матрица
 * @return true если матрицы равны
 * @return false если матрицы не равны
 */
bool S21Matrix::operator==(const S21Matrix &other) const {
  return EqMatrix(other);
}

/**
 * @brief Перегрузка оператора + для объекта
 *
 * @param other 2е слагаемое (матрица)
 * @return S21Matrix Результат сложения двух матриц
 */
S21Matrix S21Matrix::operator+(const S21Matrix &other) const {
  S21Matrix tmp = *this;
  tmp.SumMatrix(other);
  return tmp;
}

/**
 * @brief Перегрузка оператора += для объекта
 *
 * @details
 * Вообще все операторы присваивания должны по стандарту возвращать ссылку на
 * объект.
 * via: https://en.cppreference.com/w/cpp/language/operator_assignment
 *
 * Возврат ссылки из присваивания позволяет создавать цепочки:
 * a = b = c; (эквивалентно b = c; a = b;)
 *
 * Это также сработало бы (в большинстве случаев), если бы оператор возвращал
 * копию нового значения, но обычно это менее эффективно.
 *
 * void в return - ошибка, цепочки работать не будут вообще (хотя одиночная
 * операция будет работать всё равно).
 *
 * Вообще кроме цепочек это надой ещё много для чего, например, для конструкций
 * вида std::cout << (a+=b) << std::endl;
 *
 *
 * @param other 2е слагаемое (матрица)
 * @return S21Matrix Результат сложения двух матриц
 */
S21Matrix &S21Matrix::operator+=(const S21Matrix &other) {
  SumMatrix(other);
  return *this;
}

/**
 * @brief Перегрузка оператора - для объекта
 *
 * @param other Вычитаемое (матрица)
 * @return S21Matrix Результат вычитания двух матриц (матрица)
 */
S21Matrix S21Matrix::operator-(const S21Matrix &other) const {
  S21Matrix tmp{*this};
  tmp.SubMatrix(other);
  return tmp;
}

/**
 * @brief Перегрузка оператора -= для объекта
 *
 * @param other Вычитаемое (матрица)
 * @return S21Matrix Результат вычитания двух матриц (матрица)
 */
S21Matrix &S21Matrix::operator-=(const S21Matrix &other) {
  SubMatrix(other);
  return *this;
}

/**
 * @brief Перегрузка оператор * для умножения объекта на число
 *
 * @details
 * Этот метод будет срабатывать только в случае, если матрица умножается на
 * число (именно в таком порядке). Для обработки ситуации наоборот, т.е.
 * умножения числа на матрицу, необходимо сделать отдельную перегрузку (см.
 * следующий метод)
 *
 * @param number Число, на которое умножается объект
 * @return S21Matrix Результат умножения текущей матрицы на число
 */
S21Matrix S21Matrix::operator*(double number) const noexcept {
  S21Matrix tmp = *this;
  tmp.MulNumber(number);
  return tmp;
}

/**
 * @brief Перегрузка оператор * для умножения числа на объект S21Matrix
 *
 * @details
 * Этот метод будет срабатывать только в случае, если число умножается на
 * матрицу (именно в таком порядке).
 *
 * Переменная с типом double "не знает" о том, как производится умножения на
 * матрицу. Поэтому мы объявляем данную перегрузку за пределами класса и
 * используем оператор с двумя аргументами.
 *
 * Для того, чтобы связать этот метод с классом S21Matrix, в заголовочном файле
 * класса мы определяем данный оператор как дружественный при помощи ключевого
 * слова friend.
 *
 * @param number Число, на которое умножается объект S21Matrix
 * @param matrix Объект S21Matrix, на который умножается число
 * @return S21Matrix Результат умножения числа на объект S21Matrix
 */
S21Matrix operator*(double number, const S21Matrix &matrix) noexcept {
  S21Matrix tmp = matrix * number;
  return tmp;
}

/**
 * @brief Перегрузка оператор *= для умножения объекта на число
 *
 * @param number Число, на которое умножается объект
 * @return S21Matrix Результат умножения текущей матрицы на число
 */
S21Matrix &S21Matrix::operator*=(double number) {
  MulNumber(number);
  return *this;
}

/**
 * @brief Перегрузка оператора * для перемножения двух объектов S21Matrix
 *
 * @param other 2й множитель (матрица)
 * @return S21Matrix Результат умножения двух матриц (матрица)
 */
S21Matrix S21Matrix::operator*(const S21Matrix &other) const {
  S21Matrix tmp{*this};
  tmp.MulMatrix(other);
  return tmp;
}

/**
 * @brief Перегрузка оператора *= для перемножения двух объектов S21Matrix
 *
 * @param other 2й множитель (матрица)
 * @return S21Matrix Результат умножения двух матриц (матрица)
 */
S21Matrix &S21Matrix::operator*=(const S21Matrix &other) {
  MulMatrix(other);
  return *this;
}

/**
 * @brief
 * Освобождает память, выделенную под массив matrix_.
 *
 * @details
 * Этот метод будет вызываться из других методов в случаях, когда требуется
 * выполнить перераспределение памяти или освобождение памяти.
 *
 * Проверка на nullptr не производится, т.к. это успешно делает сам delete
 * В качестве альтернативы можно было бы контролировать необходимость очистки
 * памяти по rows_ и cols_ (и учитывать это во всей программе)
 */
void S21Matrix::Free() noexcept {
  delete[] matrix_;
  rows_ = 0;
  cols_ = 0;
  // Для избежания сбоев при повторном освобождении указателей и повторном
  // использовании указателей
  matrix_ = nullptr;
}

/**
 * @brief По сути accessor и mutator для поля matrix_, однако не совсем и он
 * приватный, т.к. позволяет и получить и изменить данные. Нужен для
 * использования в перегрузке оператора (), который уже разделяет поведение для
 * const и не-const объектов
 *
 * @param row Номер столбца запрашиваемого элемента
 * @param col Номер строки запрашиваемого элемента
 * @return double& Ссылка на значение (row, col)
 */
double &S21Matrix::GetMatrixElement(int row, int col) const {
  if (row >= rows_ || col >= cols_ || row < 0 || col < 0) {
    throw std::out_of_range("Incorrect input for (), index is out of range.");
  }
  return matrix_[row * cols_ + col];
}

/**
 * @brief Меняет местами строки row1 и row2 матрицы.
 *
 * Существование строк не проверяется, т.к. метод является приватным и вся
 * валидация происходит в методах, откуда он вызывается
 *
 * @param row1 1я Строка для обмена
 * @param row2 2я Строка для обмена
 */
void S21Matrix::SwapRows(int row1, int row2) noexcept {
  if (row1 != row2) {
    for (int i = 0; i < cols_; ++i) {
      std::swap((*this)(row1, i), (*this)(row2, i));
    }
  }
}

/**
 * @brief Метод для получения из текущей матрицы порядка n матрицы порядка n-1,
 * которая получается из матрицы путём вычёркивания строки номер skip_row и
 * столбца номер skip_column.
 *
 * @details
 * Например, при skip_row = 2 и skip_column = 0 из данной матрицы:
 * 1.100000 1.200000 1.300000 1.400000
 * 1.500000 1.600000 1.700000 1.800000
 * 1.900000 2.000000 2.100000 2.200000
 * 2.300000 2.400000 2.500000 2.600000
 *
 * получаем:
 * - 1.200000 1.300000 1.400000
 * - 1.600000 1.700000 1.800000
 * -        -        -        -
 * - 2.400000 2.500000 2.600000
 *
 * т.е. в return вернется матрица:
 * 1.200000 1.300000 1.400000
 * 1.600000 1.700000 1.800000
 * 2.400000 2.500000 2.600000
 *
 * Никакая валидация данных в методе не осуществляется, т.к. он является
 * приватным и вся валидация происходит в методах, откуда он вызывается. Да и
 * при отрицательных размерах исключение будет брошено конструктором S21Matrix
 * result.
 *
 * @param skip_row
 * @param skip_column
 * @return S21Matrix
 */
S21Matrix S21Matrix::GetMinorMatrix(const int skip_row,
                                    const int skip_column) const {
  S21Matrix result{rows_ - 1, cols_ - 1};

  int shift_i = 0;
  for (int i = 0; i < result.get_rows(); ++i) {
    if (i == skip_row) {
      shift_i = 1;
    }
    int shift_j = 0;
    for (int j = 0; j < result.get_cols(); ++j) {
      if (j == skip_column) {
        shift_j = 1;
      }
      result(i, j) = (*this)(i + shift_i, j + shift_j);
    }
  }

  return result;
}
